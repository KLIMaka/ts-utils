import { Interpolator } from "./interpolator";
export declare const radsInDeg: number;
export declare const degInRad: number;
export declare const PI: number;
export declare const TWO_PI: number;
export declare const HALF_PI: number;
export declare const EPS = 1e-9;
export declare const HASH: number;
export declare function eq(lh: number, rh: number): boolean;
export declare function lse(lh: number, rh: number): boolean;
export declare function gte(lh: number, rh: number): boolean;
export declare function deg2rad(deg: number): number;
export declare function rad2deg(rad: number): number;
export declare function sign(x: number): 0 | 1 | -1;
export declare function int(x: number): number;
export declare function clamp(x: number, min?: number, max?: number): number;
export declare function mix(x: number, y: number, d: number): number;
export declare function normalize(x: number, min: number, max: number): number;
export declare function sum(lh: number, rh: number): number;
export declare function trz(x: number): number;
export declare function ispow2(x: number): boolean;
export declare function fract(x: number): number;
export declare function nextpow2(x: number): number;
export declare function sqrLen2d(x: number, y: number): number;
export declare function len2d(x: number, y: number): number;
export declare function lenPointToLine(px: number, py: number, l1x: number, l1y: number, l2x: number, l2y: number): number;
export declare function len3d(x: number, y: number, z: number): number;
export declare function dot2d(x1: number, y1: number, x2: number, y2: number): number;
export declare function orto2d(x: number, y: number): [number, number];
export declare function ortonorm2d(x: number, y: number): [number, number];
export declare function cross2d(x1: number, y1: number, x2: number, y2: number): number;
export declare function monoatan2(y: number, x: number): number;
export declare function angInArc(arcStart: number, arcEnd: number, ang: number): boolean;
export declare function arcsIntersects(a1s: number, a1e: number, a2s: number, a2e: number): boolean;
export declare function cyclic(x: number, max: number): number;
export declare function linear(min: number, max: number, t: number): number;
export declare function int4ToFloat(x: number, y: number, z: number, w: number): number;
export declare function cubic(x: number): number;
export declare function smothstep(x: number, min: number, max: number): number;
export declare function vec42int(x: number, y: number, z: number, w: number): number;
export declare function tuple(v0: number, v1: number): number;
export declare function detuple0(v: number): number;
export declare function detuple1(v: number): number;
export declare function tuple2<T1, T2>(value: [T1, T2], v0: T1, v1: T2): [T1, T2];
export declare function tuple3<T1, T2, T3>(value: [T1, T2, T3], v0: T1, v1: T2, v2: T3): [T1, T2, T3];
export declare function tuple4<T1, T2, T3, T4>(value: [T1, T2, T3, T4], v0: T1, v1: T2, v2: T3, v3: T4): [T1, T2, T3, T4];
export declare function productValue<T>(start: T, f: (lh: T, rh: T) => T): {
    get: () => T;
    set: (v: T) => T;
};
export declare function minValue(start: number): {
    get: () => number;
    set: (v: number) => number;
};
export declare function memoize<T, U>(f: (t: T) => U): (t: T) => U;
export declare function quadratic(x0: number, x1: number, x2: number, t: number): number;
export declare function biquad(w: number, h: number, data: number[], wrap?: (x: number, max: number) => number): (x: number, y: number) => number;
export declare function bilinear<T>(w: number, h: number, data: T[], inter: Interpolator<T>, wrap?: (x: number, max: number) => number): (x: number, y: number) => T;
export declare function perlin2d(x: number, y: number): number;
export declare function octaves2d(f: (x: number, y: number) => number, octaves: number): (x: number, y: number) => number;
export declare const Vec2Hash: (v: [number, number]) => number;
export declare const Vec2Eq: (v1: [number, number], v2: [number, number]) => boolean;
export declare function optimize(f: (x: number) => number, count?: number, eps?: number): number;
export type RadialSegment = {
    start: number;
    end: number;
    value: number;
};
export declare function createSegment(start: number, end: number, value: number): RadialSegment;
export declare class RadialSegments {
    private segments;
    constructor();
    clear(): void;
    optimize(): void;
    getValue(x: number): number;
    scan(seg: RadialSegment): boolean;
    add(seg: RadialSegment): void;
    private insertPoint;
    private findSegment;
}
//# sourceMappingURL=mathutils.d.ts.map